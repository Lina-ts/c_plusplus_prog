#pragma once
#include <iostream>

using namespace std;

class Mammal // класс Млекопитающее
{
protected:
// защищённые (protected) переменные похожи на частные (private) переменные.
// они доступны в этом классе, но не снаружи класса.
// разница между protected и private в том,
// что protected означает доступность и для происходящих подклассов
        int hp;
        double speed;
public:
// Конструктор млекопитающих – запускается ПЕРВЫМ до конструкторов классов-потомков!
Mammal()
{
        hp = 100;
        speed = 1.0;
        cout << "Млекопитающее создано!" << endl;
}
~Mammal()
{
        cout << "Млекопитающее скончалось!" << endl;
}
// Общая функция для всех Млекопитающих и производных
void breathe()
{
        cout << "Вдох... выдох" << endl;
}
void talk()
{
        cout << "Млекопитающее говорит..." << endl;
}
// Чистая виртуальная функция, (объясняется ниже)
virtual void walk() = 0;
};

